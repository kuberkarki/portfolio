{"version":3,"sources":["leadspace.scss","../../../node_modules/bootstrap/scss/mixins/_breakpoints.scss"],"names":[],"mappings":"AAEA,WACI,SAAA,CACA,mBAAA,CC2DA,wBD7DJ,WAIQ,gBAAA,CAAA,CAKA,4CACI,oBAAA,CCmDR,wBD/CI,uCAEQ,oBAAA,CACA,qBAAA,CAAA,CC4CZ,yBD/CI,uCAMQ,mBAAA,CACA,oBAAA,CAAA,CCwCZ,wBDpCA,8BAEQ,mBAAA,CACA,sBAAA,CACA,qBAAA,CACA,gBAAA,CACA,uBAAA,CAAA,8BAAA,CAAA,oBAAA,CAAA,sBAAA,CACA,mBAAA,CAAA,oBAAA,CAAA,mBAAA,CAAA,YAAA,CACA,2BAAA,CAAA,4BAAA,CAAA,6BAAA,CAAA,yBAAA,CAAA,qBAAA,CAAA,CC4BR,yBDpCA,8BAWQ,cAAA,CAAA,CAGJ,iCACI,oBAAA,CAEJ,sCACI,oBAAA,CAIR,gBACI,SAAA,CACA,kBAAA,CAIA,wBACI,gBAAA,CACA,iBAAA,CACA,uBAAA,CACA,kBAAA,CCIR,wBDRI,wBAMQ,eAAA,CACA,WAAA,CACA,wBAAA,CACA,oBAAA,CAAA,CCDZ,yBDRI,wBAaQ,uBAAA,CACA,QAAA,CACA,mBAAA,CAAA,CAGJ,4BACI,iBAAA,CACA,UAAA,CACA,WAAA,CACA,MAAA,CACA,mBAAA,CAAA,gBAAA,CAMhB,4BACI,KACI,2BAAA,CAAA,mBAAA,CAEJ,GACI,gCAAA,CAAA,wBAAA,CAAA,CALR,oBACI,KACI,2BAAA,CAAA,mBAAA,CAEJ,GACI,gCAAA,CAAA,wBAAA,CAAA,CAKJ,aACI,YAAA,CACA,iBAAA,CACA,SAAA,CACA,oCAAA,CAAA,4BAAA,CCnCJ,wBD+BA,aAMQ,aAAA,CACA,cAAA,CAAA,CCtCR,yBD+BA,aAUQ,WAAA,CAAA,CAKJ,uBACI,OAAA,CACA,KAAA,CACA,qCAAA,CAAA,6BAAA,CAEJ,0BACI,OAAA,CACA,QAAA,CACA,oCAAA,CAAA,4BAAA,CAEJ,yBACI,MAAA,CACA,QAAA,CACA,qCAAA,CAAA,6BAAA,CAEJ,sBACI,MAAA,CACA,KAAA,CACA,sCAAA,CAAA,8BAAA,CAEJ,yBACI,MAAA,CACA,UAAA,CACA,qCAAA,CAAA,6BAAA,CAEJ,0BACI,OAAA,CACA,UAAA,CACA,oCAAA,CAAA,4BAAA,CAEJ,iBACI,uCAAA,CAAA,+BAAA,CACA,uCAAA,CAAA,+BAAA,CACA,UAAA,CACA,WAAA","file":"../leadspace.min.css","sourcesContent":["@import '../common-imports';\n\n.leadspace {\n    z-index: 1;\n    padding-bottom: rem(80px);\n    @include media-breakpoint-up(tb) {\n        padding-bottom: 0;\n    }\n\n\n    &.text-small{\n        .container-content h1{\n            max-inline-size: 17ch;\n        }\n    }\n    .container {\n        &--fullwidthheader {\n            @include media-breakpoint-up(tb) {\n                padding-left: rem(100px);\n                padding-right: rem(100px);\n            }\n            @include media-breakpoint-up(xl) {\n                padding-left: rem(24px);\n                padding-right: rem(24px);\n            }\n        }\n    }\n    .container-content {\n        @include media-breakpoint-up(tb) {\n            padding-top: rem(36px);\n            padding-bottom: rem(36px);\n            padding-left: rem(30px);\n            min-height: rem(496px);\n            justify-content: center;\n            display: flex;\n            flex-direction: column;\n        }\n        @include media-breakpoint-up(xl) {\n            padding-left: 0;\n        }\n\n        h1 {\n            max-inline-size: 19ch;\n        }\n        .body-2 {\n            max-inline-size: 50ch;\n        }\n    }\n\n    &-home {\n        z-index: 2;\n        overflow-y: visible;\n    }\n\n    &-image {\n        &--ratio {\n            margin: 0 -1.5rem;\n            position: relative;\n            width: calc(100% + 48px);\n            margin-bottom: rem(64px);\n            @include media-breakpoint-up(tb) {\n                margin-bottom: 0;\n                height: 100%;\n                width: calc(100% + 142px);\n                margin-left: rem(-124px);\n            }\n\n            @include media-breakpoint-up(xl) {\n                width: calc(100% + 24px);\n                margin: 0;\n                margin-left: rem(-24px);\n            }\n\n            img {\n                position: absolute;\n                width: 100%;\n                height: 100%;\n                left: 0;\n                object-fit: cover;\n            }\n        }\n    }\n}\n\n@keyframes rotation {\n    from {\n        transform: rotate(0deg);\n    }\n    to {\n        transform: rotate(360deg);\n    }\n}\n\n.logo {\n    &-rotate {\n        display: none;\n        position: absolute;\n        z-index: 5;\n        transform: translate(50%, 50%);\n        @include media-breakpoint-up(md){\n            display: block;\n            width: rem(188px);\n        }\n        @include media-breakpoint-up(xl){\n            width: rem(256px);\n        }\n\n\n\n        &--rightTop{\n            right: 0;\n            top: 0;\n            transform: translate(50%, -50%);\n        }\n        &--rightBottom{\n            right: 0;\n            bottom: 0;\n            transform: translate(50%, 50%);\n        }\n        &--leftBottom{\n            left: 0;\n            bottom: 0;\n            transform: translate(-50%, 50%);\n        }\n        &--leftTop{\n            left: 0;\n            top: 0;\n            transform: translate(-50%, -50%);\n        }\n        &--leftCenter{\n            left: 0;\n            bottom: 50%;\n            transform: translate(-50%, 50%);\n        }\n        &--rightCenter{\n            right: 0;\n            bottom: 50%;\n            transform: translate(50%, 50%);\n        }\n        svg {\n            animation: rotation 10s infinite;\n            transition-timing-function: ease;\n            width: 100%;\n            height: 100%;\n        }\n    }\n}\n","// Breakpoint viewport sizes and media queries.\n//\n// Breakpoints are defined as a map of (name: minimum width), order from small to large:\n//\n//    (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px, xxl: 1400px)\n//\n// The map defined in the `$grid-breakpoints` global variable is used as the `$breakpoints` argument by default.\n\n// Name of the next breakpoint, or null for the last breakpoint.\n//\n//    >> breakpoint-next(sm)\n//    md\n//    >> breakpoint-next(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px, xxl: 1400px))\n//    md\n//    >> breakpoint-next(sm, $breakpoint-names: (xs sm md lg xl xxl))\n//    md\n@function breakpoint-next($name, $breakpoints: $grid-breakpoints, $breakpoint-names: map-keys($breakpoints)) {\n  $n: index($breakpoint-names, $name);\n  @if not $n {\n    @error \"breakpoint `#{$name}` not found in `#{$breakpoints}`\";\n  }\n  @return if($n < length($breakpoint-names), nth($breakpoint-names, $n + 1), null);\n}\n\n// Minimum breakpoint width. Null for the smallest (first) breakpoint.\n//\n//    >> breakpoint-min(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px, xxl: 1400px))\n//    576px\n@function breakpoint-min($name, $breakpoints: $grid-breakpoints) {\n  $min: map-get($breakpoints, $name);\n  @return if($min != 0, $min, null);\n}\n\n// Maximum breakpoint width.\n// The maximum value is reduced by 0.02px to work around the limitations of\n// `min-` and `max-` prefixes and viewports with fractional widths.\n// See https://www.w3.org/TR/mediaqueries-4/#mq-min-max\n// Uses 0.02px rather than 0.01px to work around a current rounding bug in Safari.\n// See https://bugs.webkit.org/show_bug.cgi?id=178261\n//\n//    >> breakpoint-max(md, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px, xxl: 1400px))\n//    767.98px\n@function breakpoint-max($name, $breakpoints: $grid-breakpoints) {\n  $max: map-get($breakpoints, $name);\n  @return if($max and $max > 0, $max - .02, null);\n}\n\n// Returns a blank string if smallest breakpoint, otherwise returns the name with a dash in front.\n// Useful for making responsive utilities.\n//\n//    >> breakpoint-infix(xs, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px, xxl: 1400px))\n//    \"\"  (Returns a blank string)\n//    >> breakpoint-infix(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px, xxl: 1400px))\n//    \"-sm\"\n@function breakpoint-infix($name, $breakpoints: $grid-breakpoints) {\n  @return if(breakpoint-min($name, $breakpoints) == null, \"\", \"-#{$name}\");\n}\n\n// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.\n// Makes the @content apply to the given breakpoint and wider.\n@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($name, $breakpoints);\n  @if $min {\n    @media (min-width: $min) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media of at most the maximum breakpoint width. No query for the largest breakpoint.\n// Makes the @content apply to the given breakpoint and narrower.\n@mixin media-breakpoint-down($name, $breakpoints: $grid-breakpoints) {\n  $max: breakpoint-max($name, $breakpoints);\n  @if $max {\n    @media (max-width: $max) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media that spans multiple breakpoint widths.\n// Makes the @content apply between the min and max breakpoints\n@mixin media-breakpoint-between($lower, $upper, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($lower, $breakpoints);\n  $max: breakpoint-max($upper, $breakpoints);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($lower, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($upper, $breakpoints) {\n      @content;\n    }\n  }\n}\n\n// Media between the breakpoint's minimum and maximum widths.\n// No minimum for the smallest breakpoint, and no maximum for the largest one.\n// Makes the @content apply only to the given breakpoint, not viewports any wider or narrower.\n@mixin media-breakpoint-only($name, $breakpoints: $grid-breakpoints) {\n  $min:  breakpoint-min($name, $breakpoints);\n  $next: breakpoint-next($name, $breakpoints);\n  $max:  breakpoint-max($next, $breakpoints);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($name, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($next, $breakpoints) {\n      @content;\n    }\n  }\n}\n"]}